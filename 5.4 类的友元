/*友元关系提供了不同类或对象的成员函数之间、类的成员函数
与一般函数之间进行数据共享的机制*/
/*关键字：friend 分类：友元函数 友元类*/
/*友元关系不可传递、单向、不可继承*/
#include<iostream>
#include<cmath>
using namespace std;
//友元函数是在类中用关键字friend修饰的非成员函数
//友元函数不是本类的函数成员，但可以通过对象名访问类的私有成员
class Point{
public:
	Point(int x = 0, int y = 0) :x(x), y(y) {}
	int GetX(){ return x; }
	int GetY(){ return y; }
	//友元函数的声明
	friend float dist(Point& p1, Point& p2);
private:
	int x, y;
};
//友元函数的实现
float dist(Point& p1, Point& p2) {
	double x = p1.x - p2.x;//通过对象名访问私有数据成员
	double y = p1.y - p2.y;
	return static_cast<float>(sqrt(x * x + y * y));
}
//友元类：若A为B的友元类，则A的所有成员函数均为B的友元函数
class A {
public:
	void display() { cout << x << endl; }
	int GetX() { return x; }
	friend class B;//声明B是A的友元
private:
	int x;
};
class B {
public:
	void set(int i);
	void display();
private:
	A a;//类的组合
};
void B::set(int i) {
	a.x = i;
}
void B::display() {
	cout << a.x << endl;
}
int main() {
	Point myp1(1, 1), myp2(4, 5);
	cout << "The distance is: " << dist(myp1, myp2)<<endl;
	B b;
	b.set(1);
	b.display();
	return 0;
}
